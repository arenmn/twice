//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/aren_/RiderProjects/Twice/Twice.Compiler.Backend.Parser/Twice.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TwiceLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BLOCK_OPEN=1, BLOCK_CLOSE=2, PAR_OPEN=3, PAR_CLOSE=4, SQUARE_OPEN=5, SQUARE_CLOSE=6, 
		POINTY_OPEN=7, POINTY_CLOSE=8, SEPARATOR=9, SEMI=10, COLON=11, ARROW=12, 
		REVERSE_ARROW=13, BACKSLASH=14, MODULO=15, PLUS=16, MINUS=17, MULT=18, 
		DIV=19, AND=20, OR=21, WHILE=22, IF=23, ELSE=24, FOR=25, IN=26, FUNCTION=27, 
		LET=28, CONST=29, RETURN=30, ASYNC=31, AWAIT=32, EXTERN=33, VARARG=34, 
		DOT=35, BANG=36, UNTIL=37, TRUE=38, FALSE=39, EQUALS=40, COMP=41, TYPE=42, 
		GENERIC=43, IDENTIFIER=44, NUMBER=45, FLOAT=46, DEC=47, DIGIT=48, WS=49, 
		COMMENT=50, STRING=51;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"BLOCK_OPEN", "BLOCK_CLOSE", "PAR_OPEN", "PAR_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
		"POINTY_OPEN", "POINTY_CLOSE", "SEPARATOR", "SEMI", "COLON", "ARROW", 
		"REVERSE_ARROW", "BACKSLASH", "MODULO", "PLUS", "MINUS", "MULT", "DIV", 
		"AND", "OR", "WHILE", "IF", "ELSE", "FOR", "IN", "FUNCTION", "LET", "CONST", 
		"RETURN", "ASYNC", "AWAIT", "EXTERN", "VARARG", "DOT", "BANG", "UNTIL", 
		"TRUE", "FALSE", "EQUALS", "COMP", "TYPE", "GENERIC", "IDENTIFIER", "NUMBER", 
		"FLOAT", "DEC", "DIGIT", "WS", "COMMENT", "STRING", "ESC"
	};


	public TwiceLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TwiceLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "'<'", "'>'", "','", "';'", 
		"':'", "'->'", "'<-'", "'\\'", "'%'", "'+'", "'-'", "'*'", "'/'", "'&&'", 
		"'||'", "'while'", "'if'", "'else'", "'for'", "'in'", "'fn'", "'let'", 
		"'const'", "'return'", "'threaded'", "'await'", "'extern'", "'vararg'", 
		"'.'", "'!'", "'~'", "'true'", "'false'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BLOCK_OPEN", "BLOCK_CLOSE", "PAR_OPEN", "PAR_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "POINTY_OPEN", "POINTY_CLOSE", "SEPARATOR", "SEMI", "COLON", 
		"ARROW", "REVERSE_ARROW", "BACKSLASH", "MODULO", "PLUS", "MINUS", "MULT", 
		"DIV", "AND", "OR", "WHILE", "IF", "ELSE", "FOR", "IN", "FUNCTION", "LET", 
		"CONST", "RETURN", "ASYNC", "AWAIT", "EXTERN", "VARARG", "DOT", "BANG", 
		"UNTIL", "TRUE", "FALSE", "EQUALS", "COMP", "TYPE", "GENERIC", "IDENTIFIER", 
		"NUMBER", "FLOAT", "DEC", "DIGIT", "WS", "COMMENT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Twice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TwiceLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,51,367,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,
		37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,3,
		40,245,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
		272,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,293,8,42,1,43,1,43,5,43,297,8,43,
		10,43,12,43,300,9,43,1,44,3,44,303,8,44,1,44,1,44,3,44,307,8,44,1,45,4,
		45,310,8,45,11,45,12,45,311,1,45,1,45,4,45,316,8,45,11,45,12,45,317,1,
		45,1,45,4,45,322,8,45,11,45,12,45,323,3,45,326,8,45,1,46,4,46,329,8,46,
		11,46,12,46,330,1,47,1,47,1,48,4,48,336,8,48,11,48,12,48,337,1,48,1,48,
		1,49,1,49,1,49,5,49,345,8,49,10,49,12,49,348,9,49,1,49,1,49,1,50,1,50,
		1,50,5,50,355,8,50,10,50,12,50,358,9,50,1,50,1,50,1,51,1,51,1,51,1,51,
		3,51,366,8,51,1,356,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
		69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
		93,47,95,48,97,49,99,50,101,51,103,0,1,0,5,2,0,65,90,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,387,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,1,105,1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,111,1,0,0,
		0,9,113,1,0,0,0,11,115,1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,121,1,
		0,0,0,19,123,1,0,0,0,21,125,1,0,0,0,23,127,1,0,0,0,25,130,1,0,0,0,27,133,
		1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,141,1,0,0,0,37,
		143,1,0,0,0,39,145,1,0,0,0,41,148,1,0,0,0,43,151,1,0,0,0,45,157,1,0,0,
		0,47,160,1,0,0,0,49,165,1,0,0,0,51,169,1,0,0,0,53,172,1,0,0,0,55,175,1,
		0,0,0,57,179,1,0,0,0,59,185,1,0,0,0,61,192,1,0,0,0,63,201,1,0,0,0,65,207,
		1,0,0,0,67,214,1,0,0,0,69,221,1,0,0,0,71,223,1,0,0,0,73,225,1,0,0,0,75,
		227,1,0,0,0,77,232,1,0,0,0,79,238,1,0,0,0,81,244,1,0,0,0,83,271,1,0,0,
		0,85,292,1,0,0,0,87,294,1,0,0,0,89,302,1,0,0,0,91,325,1,0,0,0,93,328,1,
		0,0,0,95,332,1,0,0,0,97,335,1,0,0,0,99,341,1,0,0,0,101,351,1,0,0,0,103,
		365,1,0,0,0,105,106,5,123,0,0,106,2,1,0,0,0,107,108,5,125,0,0,108,4,1,
		0,0,0,109,110,5,40,0,0,110,6,1,0,0,0,111,112,5,41,0,0,112,8,1,0,0,0,113,
		114,5,91,0,0,114,10,1,0,0,0,115,116,5,93,0,0,116,12,1,0,0,0,117,118,5,
		60,0,0,118,14,1,0,0,0,119,120,5,62,0,0,120,16,1,0,0,0,121,122,5,44,0,0,
		122,18,1,0,0,0,123,124,5,59,0,0,124,20,1,0,0,0,125,126,5,58,0,0,126,22,
		1,0,0,0,127,128,5,45,0,0,128,129,5,62,0,0,129,24,1,0,0,0,130,131,5,60,
		0,0,131,132,5,45,0,0,132,26,1,0,0,0,133,134,5,92,0,0,134,28,1,0,0,0,135,
		136,5,37,0,0,136,30,1,0,0,0,137,138,5,43,0,0,138,32,1,0,0,0,139,140,5,
		45,0,0,140,34,1,0,0,0,141,142,5,42,0,0,142,36,1,0,0,0,143,144,5,47,0,0,
		144,38,1,0,0,0,145,146,5,38,0,0,146,147,5,38,0,0,147,40,1,0,0,0,148,149,
		5,124,0,0,149,150,5,124,0,0,150,42,1,0,0,0,151,152,5,119,0,0,152,153,5,
		104,0,0,153,154,5,105,0,0,154,155,5,108,0,0,155,156,5,101,0,0,156,44,1,
		0,0,0,157,158,5,105,0,0,158,159,5,102,0,0,159,46,1,0,0,0,160,161,5,101,
		0,0,161,162,5,108,0,0,162,163,5,115,0,0,163,164,5,101,0,0,164,48,1,0,0,
		0,165,166,5,102,0,0,166,167,5,111,0,0,167,168,5,114,0,0,168,50,1,0,0,0,
		169,170,5,105,0,0,170,171,5,110,0,0,171,52,1,0,0,0,172,173,5,102,0,0,173,
		174,5,110,0,0,174,54,1,0,0,0,175,176,5,108,0,0,176,177,5,101,0,0,177,178,
		5,116,0,0,178,56,1,0,0,0,179,180,5,99,0,0,180,181,5,111,0,0,181,182,5,
		110,0,0,182,183,5,115,0,0,183,184,5,116,0,0,184,58,1,0,0,0,185,186,5,114,
		0,0,186,187,5,101,0,0,187,188,5,116,0,0,188,189,5,117,0,0,189,190,5,114,
		0,0,190,191,5,110,0,0,191,60,1,0,0,0,192,193,5,116,0,0,193,194,5,104,0,
		0,194,195,5,114,0,0,195,196,5,101,0,0,196,197,5,97,0,0,197,198,5,100,0,
		0,198,199,5,101,0,0,199,200,5,100,0,0,200,62,1,0,0,0,201,202,5,97,0,0,
		202,203,5,119,0,0,203,204,5,97,0,0,204,205,5,105,0,0,205,206,5,116,0,0,
		206,64,1,0,0,0,207,208,5,101,0,0,208,209,5,120,0,0,209,210,5,116,0,0,210,
		211,5,101,0,0,211,212,5,114,0,0,212,213,5,110,0,0,213,66,1,0,0,0,214,215,
		5,118,0,0,215,216,5,97,0,0,216,217,5,114,0,0,217,218,5,97,0,0,218,219,
		5,114,0,0,219,220,5,103,0,0,220,68,1,0,0,0,221,222,5,46,0,0,222,70,1,0,
		0,0,223,224,5,33,0,0,224,72,1,0,0,0,225,226,5,126,0,0,226,74,1,0,0,0,227,
		228,5,116,0,0,228,229,5,114,0,0,229,230,5,117,0,0,230,231,5,101,0,0,231,
		76,1,0,0,0,232,233,5,102,0,0,233,234,5,97,0,0,234,235,5,108,0,0,235,236,
		5,115,0,0,236,237,5,101,0,0,237,78,1,0,0,0,238,239,5,61,0,0,239,80,1,0,
		0,0,240,245,3,13,6,0,241,245,3,71,35,0,242,245,3,15,7,0,243,245,3,79,39,
		0,244,240,1,0,0,0,244,241,1,0,0,0,244,242,1,0,0,0,244,243,1,0,0,0,245,
		246,1,0,0,0,246,247,3,79,39,0,247,82,1,0,0,0,248,249,5,105,0,0,249,250,
		5,110,0,0,250,272,5,116,0,0,251,252,5,98,0,0,252,253,5,111,0,0,253,254,
		5,111,0,0,254,272,5,108,0,0,255,256,5,100,0,0,256,257,5,111,0,0,257,258,
		5,117,0,0,258,259,5,98,0,0,259,260,5,108,0,0,260,272,5,101,0,0,261,262,
		5,115,0,0,262,263,5,116,0,0,263,264,5,114,0,0,264,265,5,105,0,0,265,266,
		5,110,0,0,266,272,5,103,0,0,267,268,5,118,0,0,268,269,5,111,0,0,269,270,
		5,105,0,0,270,272,5,100,0,0,271,248,1,0,0,0,271,251,1,0,0,0,271,255,1,
		0,0,0,271,261,1,0,0,0,271,267,1,0,0,0,272,84,1,0,0,0,273,274,5,97,0,0,
		274,275,5,114,0,0,275,276,5,114,0,0,276,277,5,97,0,0,277,293,5,121,0,0,
		278,279,5,99,0,0,279,280,5,104,0,0,280,281,5,97,0,0,281,282,5,110,0,0,
		282,283,5,110,0,0,283,284,5,101,0,0,284,293,5,108,0,0,285,286,5,112,0,
		0,286,287,5,114,0,0,287,288,5,111,0,0,288,289,5,109,0,0,289,290,5,105,
		0,0,290,291,5,115,0,0,291,293,5,101,0,0,292,273,1,0,0,0,292,278,1,0,0,
		0,292,285,1,0,0,0,293,86,1,0,0,0,294,298,7,0,0,0,295,297,7,1,0,0,296,295,
		1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,88,1,0,0,0,
		300,298,1,0,0,0,301,303,3,33,16,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
		306,1,0,0,0,304,307,3,91,45,0,305,307,3,93,46,0,306,304,1,0,0,0,306,305,
		1,0,0,0,307,90,1,0,0,0,308,310,3,95,47,0,309,308,1,0,0,0,310,311,1,0,0,
		0,311,309,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,3,69,34,0,314,
		316,3,95,47,0,315,314,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,
		1,0,0,0,318,326,1,0,0,0,319,321,3,69,34,0,320,322,3,95,47,0,321,320,1,
		0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,
		325,309,1,0,0,0,325,319,1,0,0,0,326,92,1,0,0,0,327,329,3,95,47,0,328,327,
		1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,94,1,0,0,0,
		332,333,7,2,0,0,333,96,1,0,0,0,334,336,7,3,0,0,335,334,1,0,0,0,336,337,
		1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,6,48,0,
		0,340,98,1,0,0,0,341,342,3,33,16,0,342,346,3,33,16,0,343,345,8,4,0,0,344,
		343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,349,1,
		0,0,0,348,346,1,0,0,0,349,350,6,49,0,0,350,100,1,0,0,0,351,356,5,34,0,
		0,352,355,3,103,51,0,353,355,9,0,0,0,354,352,1,0,0,0,354,353,1,0,0,0,355,
		358,1,0,0,0,356,357,1,0,0,0,356,354,1,0,0,0,357,359,1,0,0,0,358,356,1,
		0,0,0,359,360,5,34,0,0,360,102,1,0,0,0,361,362,5,92,0,0,362,366,5,34,0,
		0,363,364,5,92,0,0,364,366,5,92,0,0,365,361,1,0,0,0,365,363,1,0,0,0,366,
		104,1,0,0,0,17,0,244,271,292,298,302,306,311,317,323,325,330,337,346,354,
		356,365,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
