//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/aren_/RiderProjects/Twice/Twice.Compiler.Backend.Parser/Twice.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TwiceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BLOCK_OPEN=1, BLOCK_CLOSE=2, PAR_OPEN=3, PAR_CLOSE=4, SQUARE_OPEN=5, SQUARE_CLOSE=6, 
		POINTY_OPEN=7, POINTY_CLOSE=8, SEPARATOR=9, SEMI=10, COLON=11, ARROW=12, 
		REVERSE_ARROW=13, BACKSLASH=14, MODULO=15, PLUS=16, MINUS=17, MULT=18, 
		DIV=19, AND=20, OR=21, WHILE=22, IF=23, ELSE=24, FOR=25, IN=26, FUNCTION=27, 
		LET=28, CONST=29, RETURN=30, ASYNC=31, AWAIT=32, EXTERN=33, VARARG=34, 
		DOT=35, BANG=36, UNTIL=37, TRUE=38, FALSE=39, EQUALS=40, COMP=41, TYPE=42, 
		GENERIC=43, IDENTIFIER=44, NUMBER=45, FLOAT=46, DEC=47, DIGIT=48, WS=49, 
		COMMENT=50, STRING=51;
	public const int
		RULE_prog = 0, RULE_chunk = 1, RULE_statement = 2, RULE_flowStatement = 3, 
		RULE_functionType = 4, RULE_functionArgs = 5, RULE_forLoop = 6, RULE_singleStatement = 7, 
		RULE_functionCall = 8, RULE_expression = 9, RULE_type = 10, RULE_comp = 11;
	public static readonly string[] ruleNames = {
		"prog", "chunk", "statement", "flowStatement", "functionType", "functionArgs", 
		"forLoop", "singleStatement", "functionCall", "expression", "type", "comp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'['", "']'", "'<'", "'>'", "','", "';'", 
		"':'", "'->'", "'<-'", "'\\'", "'%'", "'+'", "'-'", "'*'", "'/'", "'&&'", 
		"'||'", "'while'", "'if'", "'else'", "'for'", "'in'", "'fn'", "'let'", 
		"'const'", "'return'", "'threaded'", "'await'", "'extern'", "'vararg'", 
		"'.'", "'!'", "'~'", "'true'", "'false'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BLOCK_OPEN", "BLOCK_CLOSE", "PAR_OPEN", "PAR_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "POINTY_OPEN", "POINTY_CLOSE", "SEPARATOR", "SEMI", "COLON", 
		"ARROW", "REVERSE_ARROW", "BACKSLASH", "MODULO", "PLUS", "MINUS", "MULT", 
		"DIV", "AND", "OR", "WHILE", "IF", "ELSE", "FOR", "IN", "FUNCTION", "LET", 
		"CONST", "RETURN", "ASYNC", "AWAIT", "EXTERN", "VARARG", "DOT", "BANG", 
		"UNTIL", "TRUE", "FALSE", "EQUALS", "COMP", "TYPE", "GENERIC", "IDENTIFIER", 
		"NUMBER", "FLOAT", "DEC", "DIGIT", "WS", "COMMENT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Twice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TwiceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TwiceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TwiceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChunkContext chunk() {
			return GetRuleContext<ChunkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TwiceParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			chunk();
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_chunk);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 27;
					statement();
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FlowStatementContext flowStatement() {
			return GetRuleContext<FlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TwiceParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext singleStatement() {
			return GetRuleContext<SingleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				flowStatement();
				State = 35;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 34;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				singleStatement();
				State = 38;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlowStatementContext : ParserRuleContext {
		public FlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flowStatement; } }
	 
		public FlowStatementContext() { }
		public virtual void CopyFrom(FlowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementForContext : FlowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public StatementForContext(FlowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementBlockContext : FlowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_OPEN() { return GetToken(TwiceParser.BLOCK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChunkContext chunk() {
			return GetRuleContext<ChunkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_CLOSE() { return GetToken(TwiceParser.BLOCK_CLOSE, 0); }
		public StatementBlockContext(FlowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionDefinitionContext : FlowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TwiceParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(TwiceParser.ASYNC, 0); }
		public StatementFunctionDefinitionContext(FlowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementWhileContext : FlowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TwiceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementWhileContext(FlowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementIfContext : FlowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TwiceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TwiceParser.ELSE, 0); }
		public StatementIfContext(FlowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlowStatementContext flowStatement() {
		FlowStatementContext _localctx = new FlowStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_flowStatement);
		int _la;
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new StatementIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(IF);
				State = 43;
				expression(0);
				State = 44;
				statement();
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 45;
					Match(ELSE);
					State = 46;
					statement();
					}
					break;
				}
				}
				break;
			case WHILE:
				_localctx = new StatementWhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(WHILE);
				State = 50;
				expression(0);
				State = 51;
				statement();
				}
				break;
			case FOR:
				_localctx = new StatementForContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				forLoop();
				}
				break;
			case BLOCK_OPEN:
				_localctx = new StatementBlockContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				Match(BLOCK_OPEN);
				State = 55;
				chunk();
				State = 56;
				Match(BLOCK_CLOSE);
				}
				break;
			case FUNCTION:
			case ASYNC:
				_localctx = new StatementFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 58;
					Match(ASYNC);
					}
				}

				State = 61;
				Match(FUNCTION);
				State = 62;
				Match(IDENTIFIER);
				State = 63;
				functionType();
				State = 66;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 64;
					statement();
					}
					break;
				case 2:
					{
					State = 65;
					expression(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TwiceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			functionArgs();
			State = 71;
			Match(COLON);
			State = 72;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_OPEN() { return GetToken(TwiceParser.PAR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_CLOSE() { return GetToken(TwiceParser.PAR_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(TwiceParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TwiceParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(TwiceParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(TwiceParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(TwiceParser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(TwiceParser.SEPARATOR, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(PAR_OPEN);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 75;
				Match(IDENTIFIER);
				State = 76;
				Match(COLON);
				State = 77;
				type(0);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR) {
					{
					{
					State = 78;
					Match(SEPARATOR);
					State = 79;
					Match(IDENTIFIER);
					State = 80;
					Match(COLON);
					State = 81;
					type(0);
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 89;
			Match(PAR_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TwiceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(TwiceParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(TwiceParser.BANG, 0); }
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 12, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(FOR);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 92;
				Match(BANG);
				}
			}

			State = 95;
			Match(IDENTIFIER);
			State = 96;
			Match(IN);
			State = 97;
			expression(0);
			State = 98;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
	 
		public SingleStatementContext() { }
		public virtual void CopyFrom(SingleStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(TwiceParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(TwiceParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(TwiceParser.CONST, 0); }
		public DeclarationStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(TwiceParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(TwiceParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TwiceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternFunctionDefinitionContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(TwiceParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(TwiceParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TwiceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARARG() { return GetToken(TwiceParser.VARARG, 0); }
		public ExternFunctionDefinitionContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelPushStatementContext : SingleStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TwiceParser.ARROW, 0); }
		public ChannelPushStatementContext(SingleStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelPushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleStatement);
		int _la;
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new FunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				functionCall();
				}
				break;
			case 2:
				_localctx = new AwaitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(AWAIT);
				State = 102;
				expression(0);
				}
				break;
			case 3:
				_localctx = new ExternFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				Match(EXTERN);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARARG) {
					{
					State = 104;
					Match(VARARG);
					}
				}

				State = 107;
				Match(FUNCTION);
				State = 108;
				Match(IDENTIFIER);
				State = 109;
				Match(COLON);
				State = 110;
				type(0);
				}
				break;
			case 4:
				_localctx = new ChannelPushStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 111;
				expression(0);
				State = 112;
				Match(ARROW);
				State = 113;
				expression(0);
				}
				break;
			case 5:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				_la = TokenStream.LA(1);
				if ( !(_la==LET || _la==CONST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 116;
				Match(IDENTIFIER);
				State = 117;
				Match(EQUALS);
				State = 118;
				expression(0);
				}
				break;
			case 6:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 119;
				Match(RETURN);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305474020007978L) != 0)) {
					{
					State = 120;
					expression(0);
					}
				}

				}
				break;
			case 7:
				_localctx = new AssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 123;
				Match(IDENTIFIER);
				State = 124;
				Match(EQUALS);
				State = 125;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_OPEN() { return GetToken(TwiceParser.PAR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_CLOSE() { return GetToken(TwiceParser.PAR_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_OPEN() { return GetToken(TwiceParser.POINTY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_CLOSE() { return GetToken(TwiceParser.POINTY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(TwiceParser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(TwiceParser.SEPARATOR, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(IDENTIFIER);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POINTY_OPEN) {
				{
				State = 129;
				Match(POINTY_OPEN);
				State = 130;
				type(0);
				State = 131;
				Match(POINTY_CLOSE);
				}
			}

			State = 135;
			Match(PAR_OPEN);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305474020007978L) != 0)) {
				{
				State = 136;
				expression(0);
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR) {
					{
					{
					State = 137;
					Match(SEPARATOR);
					State = 138;
					expression(0);
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 146;
			Match(PAR_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAddContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TwiceParser.PLUS, 0); }
		public ExpressionAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(TwiceParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBoolContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(TwiceParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(TwiceParser.FALSE, 0); }
		public ExpressionBoolContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMultiplyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TwiceParser.MULT, 0); }
		public ExpressionMultiplyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionModuloContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(TwiceParser.MODULO, 0); }
		public ExpressionModuloContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNegateContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(TwiceParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionNegateContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_OPEN() { return GetToken(TwiceParser.PAR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_CLOSE() { return GetToken(TwiceParser.PAR_CLOSE, 0); }
		public ExpressionParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLambdaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSLASH() { return GetToken(TwiceParser.BACKSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TwiceParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(TwiceParser.ASYNC, 0); }
		public ExpressionLambdaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBlockContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_OPEN() { return GetToken(TwiceParser.BLOCK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChunkContext chunk() {
			return GetRuleContext<ChunkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_CLOSE() { return GetToken(TwiceParser.BLOCK_CLOSE, 0); }
		public ExpressionBlockContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionDivideContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TwiceParser.DIV, 0); }
		public ExpressionDivideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDivide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionComparisonContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		public ExpressionComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSubtractContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TwiceParser.MINUS, 0); }
		public ExpressionSubtractContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionArrayLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(TwiceParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(TwiceParser.SQUARE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(TwiceParser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(TwiceParser.SEPARATOR, i);
		}
		public ExpressionArrayLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNumberContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TwiceParser.NUMBER, 0); }
		public ExpressionNumberContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TwiceParser.AND, 0); }
		public ExpressionAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUntilContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(TwiceParser.UNTIL, 0); }
		public ExpressionUntilContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUntil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStringContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TwiceParser.STRING, 0); }
		public ExpressionStringContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TwiceParser.OR, 0); }
		public ExpressionOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionArrayAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_OPEN() { return GetToken(TwiceParser.SQUARE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_CLOSE() { return GetToken(TwiceParser.SQUARE_CLOSE, 0); }
		public ExpressionArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionChannelLoadContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_ARROW() { return GetToken(TwiceParser.REVERSE_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionChannelLoadContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionChannelLoad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionVariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TwiceParser.IDENTIFIER, 0); }
		public ExpressionVariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new ExpressionParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 149;
				Match(PAR_OPEN);
				State = 150;
				expression(0);
				State = 151;
				Match(PAR_CLOSE);
				}
				break;
			case 2:
				{
				_localctx = new ExpressionBlockContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				Match(BLOCK_OPEN);
				State = 154;
				chunk();
				State = 155;
				expression(0);
				State = 156;
				Match(BLOCK_CLOSE);
				}
				break;
			case 3:
				{
				_localctx = new ExpressionNegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158;
				Match(BANG);
				State = 159;
				expression(20);
				}
				break;
			case 4:
				{
				_localctx = new ExpressionChannelLoadContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				Match(REVERSE_ARROW);
				State = 161;
				expression(19);
				}
				break;
			case 5:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 162;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163;
				Match(AWAIT);
				State = 164;
				expression(8);
				}
				break;
			case 7:
				{
				_localctx = new ExpressionLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165;
				Match(BACKSLASH);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 166;
					Match(ASYNC);
					}
				}

				State = 169;
				functionType();
				State = 170;
				Match(ARROW);
				State = 173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 171;
					statement();
					}
					break;
				case 2:
					{
					State = 172;
					expression(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new ExpressionArrayLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 175;
				Match(SQUARE_OPEN);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305474020007978L) != 0)) {
					{
					State = 176;
					expression(0);
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==SEPARATOR) {
						{
						{
						State = 177;
						Match(SEPARATOR);
						State = 178;
						expression(0);
						}
						}
						State = 183;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 186;
				Match(SQUARE_CLOSE);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionBoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				_localctx = new ExpressionStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				Match(STRING);
				}
				break;
			case 11:
				{
				_localctx = new ExpressionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189;
				Match(IDENTIFIER);
				}
				break;
			case 12:
				{
				_localctx = new ExpressionNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190;
				Match(NUMBER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 226;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new ExpressionDivideContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 194;
						Match(DIV);
						State = 195;
						expression(19);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionMultiplyContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 197;
						Match(MULT);
						State = 198;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 200;
						Match(PLUS);
						State = 201;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionSubtractContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 203;
						Match(MINUS);
						State = 204;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionModuloContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 205;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 206;
						Match(MODULO);
						State = 207;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionUntilContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 209;
						Match(UNTIL);
						State = 210;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 212;
						comp();
						State = 213;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 216;
						Match(AND);
						State = 217;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 219;
						Match(OR);
						State = 220;
						expression(11);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 222;
						Match(SQUARE_OPEN);
						State = 223;
						expression(0);
						State = 224;
						Match(SQUARE_CLOSE);
						}
						break;
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeFunctionContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_OPEN() { return GetToken(TwiceParser.PAR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR_CLOSE() { return GetToken(TwiceParser.PAR_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(TwiceParser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(TwiceParser.SEPARATOR, i);
		}
		public TypeFunctionContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeBasicContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(TwiceParser.TYPE, 0); }
		public TypeBasicContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBasic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeGenericContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(TwiceParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_OPEN() { return GetToken(TwiceParser.POINTY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_CLOSE() { return GetToken(TwiceParser.POINTY_CLOSE, 0); }
		public TypeGenericContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GENERIC:
				{
				_localctx = new TypeGenericContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 232;
				Match(GENERIC);
				State = 233;
				Match(POINTY_OPEN);
				State = 234;
				type(0);
				State = 235;
				Match(POINTY_CLOSE);
				}
				break;
			case TYPE:
				{
				_localctx = new TypeBasicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				Match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeFunctionContext(new TypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 240;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 241;
					Match(PAR_OPEN);
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE || _la==GENERIC) {
						{
						State = 242;
						type(0);
						State = 247;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==SEPARATOR) {
							{
							{
							State = 243;
							Match(SEPARATOR);
							State = 244;
							type(0);
							}
							}
							State = 249;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 252;
					Match(PAR_CLOSE);
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP() { return GetToken(TwiceParser.COMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_OPEN() { return GetToken(TwiceParser.POINTY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTY_CLOSE() { return GetToken(TwiceParser.POINTY_CLOSE, 0); }
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITwiceVisitor<TResult> typedVisitor = visitor as ITwiceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 22, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199023255936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 10: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 7);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,51,261,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,1,5,1,29,8,1,10,
		1,12,1,32,9,1,1,2,1,2,3,2,36,8,2,1,2,1,2,1,2,3,2,41,8,2,1,3,1,3,1,3,1,
		3,1,3,3,3,48,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,60,8,3,1,
		3,1,3,1,3,1,3,1,3,3,3,67,8,3,3,3,69,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,5,5,83,8,5,10,5,12,5,86,9,5,3,5,88,8,5,1,5,1,5,1,6,1,
		6,3,6,94,8,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,106,8,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,122,8,7,1,7,1,7,
		1,7,3,7,127,8,7,1,8,1,8,1,8,1,8,1,8,3,8,134,8,8,1,8,1,8,1,8,1,8,5,8,140,
		8,8,10,8,12,8,143,9,8,3,8,145,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,168,8,9,1,9,1,9,1,
		9,1,9,3,9,174,8,9,1,9,1,9,1,9,1,9,5,9,180,8,9,10,9,12,9,183,9,9,3,9,185,
		8,9,1,9,1,9,1,9,1,9,1,9,3,9,192,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,227,8,9,10,9,12,9,230,9,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,3,10,239,8,10,1,10,1,10,1,10,1,10,1,10,5,10,246,
		8,10,10,10,12,10,249,9,10,3,10,251,8,10,1,10,5,10,254,8,10,10,10,12,10,
		257,9,10,1,11,1,11,1,11,0,2,18,20,12,0,2,4,6,8,10,12,14,16,18,20,22,0,
		3,1,0,28,29,1,0,38,39,2,0,7,8,41,41,301,0,24,1,0,0,0,2,30,1,0,0,0,4,40,
		1,0,0,0,6,68,1,0,0,0,8,70,1,0,0,0,10,74,1,0,0,0,12,91,1,0,0,0,14,126,1,
		0,0,0,16,128,1,0,0,0,18,191,1,0,0,0,20,238,1,0,0,0,22,258,1,0,0,0,24,25,
		3,2,1,0,25,26,5,0,0,1,26,1,1,0,0,0,27,29,3,4,2,0,28,27,1,0,0,0,29,32,1,
		0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,3,1,0,0,0,32,30,1,0,0,0,33,35,3,6,
		3,0,34,36,5,10,0,0,35,34,1,0,0,0,35,36,1,0,0,0,36,41,1,0,0,0,37,38,3,14,
		7,0,38,39,5,10,0,0,39,41,1,0,0,0,40,33,1,0,0,0,40,37,1,0,0,0,41,5,1,0,
		0,0,42,43,5,23,0,0,43,44,3,18,9,0,44,47,3,4,2,0,45,46,5,24,0,0,46,48,3,
		4,2,0,47,45,1,0,0,0,47,48,1,0,0,0,48,69,1,0,0,0,49,50,5,22,0,0,50,51,3,
		18,9,0,51,52,3,4,2,0,52,69,1,0,0,0,53,69,3,12,6,0,54,55,5,1,0,0,55,56,
		3,2,1,0,56,57,5,2,0,0,57,69,1,0,0,0,58,60,5,31,0,0,59,58,1,0,0,0,59,60,
		1,0,0,0,60,61,1,0,0,0,61,62,5,27,0,0,62,63,5,44,0,0,63,66,3,8,4,0,64,67,
		3,4,2,0,65,67,3,18,9,0,66,64,1,0,0,0,66,65,1,0,0,0,67,69,1,0,0,0,68,42,
		1,0,0,0,68,49,1,0,0,0,68,53,1,0,0,0,68,54,1,0,0,0,68,59,1,0,0,0,69,7,1,
		0,0,0,70,71,3,10,5,0,71,72,5,11,0,0,72,73,3,20,10,0,73,9,1,0,0,0,74,87,
		5,3,0,0,75,76,5,44,0,0,76,77,5,11,0,0,77,84,3,20,10,0,78,79,5,9,0,0,79,
		80,5,44,0,0,80,81,5,11,0,0,81,83,3,20,10,0,82,78,1,0,0,0,83,86,1,0,0,0,
		84,82,1,0,0,0,84,85,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,87,75,1,0,0,0,
		87,88,1,0,0,0,88,89,1,0,0,0,89,90,5,4,0,0,90,11,1,0,0,0,91,93,5,25,0,0,
		92,94,5,36,0,0,93,92,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,5,44,0,
		0,96,97,5,26,0,0,97,98,3,18,9,0,98,99,3,4,2,0,99,13,1,0,0,0,100,127,3,
		16,8,0,101,102,5,32,0,0,102,127,3,18,9,0,103,105,5,33,0,0,104,106,5,34,
		0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,108,5,27,0,0,108,
		109,5,44,0,0,109,110,5,11,0,0,110,127,3,20,10,0,111,112,3,18,9,0,112,113,
		5,12,0,0,113,114,3,18,9,0,114,127,1,0,0,0,115,116,7,0,0,0,116,117,5,44,
		0,0,117,118,5,40,0,0,118,127,3,18,9,0,119,121,5,30,0,0,120,122,3,18,9,
		0,121,120,1,0,0,0,121,122,1,0,0,0,122,127,1,0,0,0,123,124,5,44,0,0,124,
		125,5,40,0,0,125,127,3,18,9,0,126,100,1,0,0,0,126,101,1,0,0,0,126,103,
		1,0,0,0,126,111,1,0,0,0,126,115,1,0,0,0,126,119,1,0,0,0,126,123,1,0,0,
		0,127,15,1,0,0,0,128,133,5,44,0,0,129,130,5,7,0,0,130,131,3,20,10,0,131,
		132,5,8,0,0,132,134,1,0,0,0,133,129,1,0,0,0,133,134,1,0,0,0,134,135,1,
		0,0,0,135,144,5,3,0,0,136,141,3,18,9,0,137,138,5,9,0,0,138,140,3,18,9,
		0,139,137,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,
		145,1,0,0,0,143,141,1,0,0,0,144,136,1,0,0,0,144,145,1,0,0,0,145,146,1,
		0,0,0,146,147,5,4,0,0,147,17,1,0,0,0,148,149,6,9,-1,0,149,150,5,3,0,0,
		150,151,3,18,9,0,151,152,5,4,0,0,152,192,1,0,0,0,153,154,5,1,0,0,154,155,
		3,2,1,0,155,156,3,18,9,0,156,157,5,2,0,0,157,192,1,0,0,0,158,159,5,36,
		0,0,159,192,3,18,9,20,160,161,5,13,0,0,161,192,3,18,9,19,162,192,3,16,
		8,0,163,164,5,32,0,0,164,192,3,18,9,8,165,167,5,14,0,0,166,168,5,31,0,
		0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,3,8,4,0,170,
		173,5,12,0,0,171,174,3,4,2,0,172,174,3,18,9,0,173,171,1,0,0,0,173,172,
		1,0,0,0,174,192,1,0,0,0,175,184,5,5,0,0,176,181,3,18,9,0,177,178,5,9,0,
		0,178,180,3,18,9,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
		182,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,176,1,0,0,0,184,185,1,
		0,0,0,185,186,1,0,0,0,186,192,5,6,0,0,187,192,7,1,0,0,188,192,5,51,0,0,
		189,192,5,44,0,0,190,192,5,45,0,0,191,148,1,0,0,0,191,153,1,0,0,0,191,
		158,1,0,0,0,191,160,1,0,0,0,191,162,1,0,0,0,191,163,1,0,0,0,191,165,1,
		0,0,0,191,175,1,0,0,0,191,187,1,0,0,0,191,188,1,0,0,0,191,189,1,0,0,0,
		191,190,1,0,0,0,192,228,1,0,0,0,193,194,10,18,0,0,194,195,5,19,0,0,195,
		227,3,18,9,19,196,197,10,17,0,0,197,198,5,18,0,0,198,227,3,18,9,18,199,
		200,10,16,0,0,200,201,5,16,0,0,201,227,3,18,9,17,202,203,10,15,0,0,203,
		204,5,17,0,0,204,227,3,18,9,16,205,206,10,14,0,0,206,207,5,15,0,0,207,
		227,3,18,9,15,208,209,10,13,0,0,209,210,5,37,0,0,210,227,3,18,9,14,211,
		212,10,12,0,0,212,213,3,22,11,0,213,214,3,18,9,13,214,227,1,0,0,0,215,
		216,10,11,0,0,216,217,5,20,0,0,217,227,3,18,9,12,218,219,10,10,0,0,219,
		220,5,21,0,0,220,227,3,18,9,11,221,222,10,7,0,0,222,223,5,5,0,0,223,224,
		3,18,9,0,224,225,5,6,0,0,225,227,1,0,0,0,226,193,1,0,0,0,226,196,1,0,0,
		0,226,199,1,0,0,0,226,202,1,0,0,0,226,205,1,0,0,0,226,208,1,0,0,0,226,
		211,1,0,0,0,226,215,1,0,0,0,226,218,1,0,0,0,226,221,1,0,0,0,227,230,1,
		0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,19,1,0,0,0,230,228,1,0,0,0,231,
		232,6,10,-1,0,232,233,5,43,0,0,233,234,5,7,0,0,234,235,3,20,10,0,235,236,
		5,8,0,0,236,239,1,0,0,0,237,239,5,42,0,0,238,231,1,0,0,0,238,237,1,0,0,
		0,239,255,1,0,0,0,240,241,10,3,0,0,241,250,5,3,0,0,242,247,3,20,10,0,243,
		244,5,9,0,0,244,246,3,20,10,0,245,243,1,0,0,0,246,249,1,0,0,0,247,245,
		1,0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,250,242,1,0,0,
		0,250,251,1,0,0,0,251,252,1,0,0,0,252,254,5,4,0,0,253,240,1,0,0,0,254,
		257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,21,1,0,0,0,257,255,1,0,
		0,0,258,259,7,2,0,0,259,23,1,0,0,0,27,30,35,40,47,59,66,68,84,87,93,105,
		121,126,133,141,144,167,173,181,184,191,226,228,238,247,250,255
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
